/**
 * 🌱 BIFLOW DATA MODEL VALIDATION TESTS
 * 
 * Comprehensive test suite for Board ↔ Mind Garden 1:1 relationship
 * and all BiFlow operations.
 */

import { 
  createBiFlowBoard, 
  createMindGarden,
  biflowUtils,
  BIFLOW_ORIGINS 
} from './biflow-types.js';
import { useBiFlowStore } from './biflow-store.js';
import { ELEMENT_TYPES } from './types.js';

// 🌱 TEST SUITE: BiFlow Data Model
export const biflowTests = {
  
  /**
   * Test 1: Basic Board ↔ Garden Creation
   */
  testBasicCreation: () => {
    console.log('🧪 Test 1: Basic Board ↔ Garden Creation');
    
    try {
      // Create board
      const board = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: 100, y: 100 });
      
      // Create garden for board
      const garden = createMindGarden(board.id, {
        origin: BIFLOW_ORIGINS.DEDICATED
      });
      
      // Link them
      board.mindGardenId = garden.id;
      
      // Validate link
      const validation = biflowUtils.validation.validateBoardGardenLink(board, garden);
      
      console.log('✅ Basic creation test passed:', {
        boardId: board.id,
        gardenId: garden.id,
        isValid: validation.isValid
      });
      
      return { success: true, board, garden, validation };
      
    } catch (error) {
      console.error('❌ Basic creation test failed:', error);
      return { success: false, error };
    }
  },
  
  /**
   * Test 2: Promotion Flow (Mind Garden → Board)
   */\n  testPromotionFlow: () => {\n    console.log('🧪 Test 2: Promotion Flow (Mind Garden → Board)');\n    \n    try {\n      // Mock Mind Garden elements\n      const gardenElements = [\n        {\n          id: 'idea_1',\n          type: 'note',\n          content: 'Revolutionary blockchain idea',\n          position: { x: 50, y: 50 }\n        },\n        {\n          id: 'idea_2',\n          type: 'note',\n          content: 'Smart contract architecture',\n          position: { x: 200, y: 100 }\n        }\n      ];\n      \n      // Promote to board\n      const { board, dedicatedGarden, promotionSummary } = biflowUtils.promotion.promoteElementsToBoard(\n        gardenElements,\n        'mg-generale',\n        { customTitle: 'Blockchain Project' }\n      );\n      \n      // Validate promotion result\n      const validation = biflowUtils.validation.validateBoardGardenLink(board, dedicatedGarden);\n      \n      console.log('✅ Promotion flow test passed:', {\n        elementsPromoted: promotionSummary.elementsPromoted,\n        autoTitle: promotionSummary.autoGeneratedTitle,\n        isValid: validation.isValid\n      });\n      \n      return { success: true, board, dedicatedGarden, promotionSummary };\n      \n    } catch (error) {\n      console.error('❌ Promotion flow test failed:', error);\n      return { success: false, error };\n    }\n  },\n  \n  /**\n   * Test 3: Legacy Migration\n   */\n  testLegacyMigration: () => {\n    console.log('🧪 Test 3: Legacy Migration');\n    \n    try {\n      // Mock legacy boards without Mind Gardens\n      const legacyBoards = [\n        {\n          id: 'board_legacy_1',\n          type: 'board',\n          title: 'Legacy Project A',\n          data: {\n            title: 'Legacy Project A',\n            description: 'Old project without Mind Garden'\n          },\n          createdAt: Date.now() - 86400000 // 1 day ago\n        },\n        {\n          id: 'board_legacy_2',\n          type: 'board',\n          data: {\n            title: 'Legacy Project B',\n            description: 'Another old project'\n          },\n          createdAt: Date.now() - 172800000 // 2 days ago\n        }\n      ];\n      \n      // Migrate legacy boards\n      const { newGardens, updatedBoards, migrationSummary } = biflowUtils.migration.batchMigrateLegacyBoards(\n        legacyBoards,\n        [] // No existing gardens\n      );\n      \n      // Validate each migrated board\n      const validations = updatedBoards.map(board => {\n        const garden = newGardens.find(g => g.id === board.mindGardenId);\n        return {\n          boardId: board.id,\n          ...biflowUtils.validation.validateBoardGardenLink(board, garden)\n        };\n      });\n      \n      const allValid = validations.every(v => v.isValid);\n      \n      console.log('✅ Legacy migration test passed:', {\n        migratedCount: migrationSummary.migratedCount,\n        allValid,\n        validations\n      });\n      \n      return { success: true, migrationSummary, validations, newGardens, updatedBoards };\n      \n    } catch (error) {\n      console.error('❌ Legacy migration test failed:', error);\n      return { success: false, error };\n    }\n  },\n  \n  /**\n   * Test 4: Hierarchy Validation\n   */\n  testHierarchyValidation: () => {\n    console.log('🧪 Test 4: Hierarchy Validation');\n    \n    try {\n      // Create parent board and garden\n      const parentBoard = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: 0, y: 0 });\n      const parentGarden = createMindGarden(parentBoard.id, {\n        origin: BIFLOW_ORIGINS.DEDICATED\n      });\n      parentBoard.mindGardenId = parentGarden.id;\n      \n      // Create child board and garden\n      const childBoard = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: 100, y: 100 }, {\n        parentBoardId: parentBoard.id,\n        origin: BIFLOW_ORIGINS.SUB_BOARD\n      });\n      const childGarden = createMindGarden(childBoard.id, {\n        origin: BIFLOW_ORIGINS.SUB_GARDEN,\n        parentGardenId: parentGarden.id\n      });\n      childBoard.mindGardenId = childGarden.id;\n      \n      // Create grandchild board and garden\n      const grandchildBoard = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: 200, y: 200 }, {\n        parentBoardId: childBoard.id,\n        origin: BIFLOW_ORIGINS.SUB_BOARD\n      });\n      const grandchildGarden = createMindGarden(grandchildBoard.id, {\n        origin: BIFLOW_ORIGINS.SUB_GARDEN,\n        parentGardenId: childGarden.id\n      });\n      grandchildBoard.mindGardenId = grandchildGarden.id;\n      \n      const boards = [parentBoard, childBoard, grandchildBoard];\n      const gardens = [parentGarden, childGarden, grandchildGarden];\n      \n      // Validate hierarchy\n      const hierarchyValidation = biflowUtils.validation.validateHierarchy(boards, gardens);\n      \n      // Test navigation paths\n      const parentPath = biflowUtils.navigation.getBoardNavigationPath(parentBoard, boards);\n      const childPath = biflowUtils.navigation.getBoardNavigationPath(childBoard, boards);\n      const grandchildPath = biflowUtils.navigation.getBoardNavigationPath(grandchildBoard, boards);\n      \n      console.log('✅ Hierarchy validation test passed:', {\n        isValid: hierarchyValidation.isValid,\n        pathLengths: {\n          parent: parentPath.length,\n          child: childPath.length,\n          grandchild: grandchildPath.length\n        }\n      });\n      \n      return {\n        success: true,\n        boards,\n        gardens,\n        hierarchyValidation,\n        navigationPaths: { parentPath, childPath, grandchildPath }\n      };\n      \n    } catch (error) {\n      console.error('❌ Hierarchy validation test failed:', error);\n      return { success: false, error };\n    }\n  },\n  \n  /**\n   * Test 5: Orphan Detection\n   */\n  testOrphanDetection: () => {\n    console.log('🧪 Test 5: Orphan Detection');\n    \n    try {\n      // Create valid board-garden pairs\n      const validBoard = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: 0, y: 0 });\n      const validGarden = createMindGarden(validBoard.id);\n      validBoard.mindGardenId = validGarden.id;\n      \n      // Create orphaned board (no garden)\n      const orphanedBoard = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: 100, y: 100 });\n      // Don't create garden or set mindGardenId\n      \n      // Create orphaned garden (no board)\n      const orphanedGarden = createMindGarden('nonexistent_board_id');\n      \n      const boards = [validBoard, orphanedBoard];\n      const gardens = [validGarden, orphanedGarden];\n      \n      // Detect orphans\n      const orphanCheck = biflowUtils.validation.findOrphanedEntities(boards, gardens);\n      \n      console.log('✅ Orphan detection test passed:', {\n        hasOrphans: orphanCheck.hasOrphans,\n        orphanedBoards: orphanCheck.orphanedBoards.length,\n        orphanedGardens: orphanCheck.orphanedGardens.length\n      });\n      \n      return {\n        success: true,\n        orphanCheck,\n        expectedOrphans: {\n          boards: 1, // orphanedBoard\n          gardens: 1 // orphanedGarden\n        }\n      };\n      \n    } catch (error) {\n      console.error('❌ Orphan detection test failed:', error);\n      return { success: false, error };\n    }\n  },\n  \n  /**\n   * Test 6: Store Integration\n   */\n  testStoreIntegration: async () => {\n    console.log('🧪 Test 6: Store Integration');\n    \n    try {\n      const store = useBiFlowStore.getState();\n      \n      // Reset store for clean test\n      store.resetSystem();\n      \n      // Test board creation with garden\n      const { board, garden } = store.createBoardWithGarden(\n        { x: 150, y: 150 },\n        {\n          title: 'Store Test Board',\n          description: 'Testing store integration'\n        }\n      );\n      \n      // Test navigation\n      store.navigateToGarden(board.id);\n      const activeGarden = store.activeGardenId;\n      \n      store.navigateToBoard(garden.id);\n      const currentView = store.currentView;\n      \n      // Test promotion\n      const mockElements = [\n        {\n          id: 'test_element_1',\n          type: 'note',\n          content: 'Test promotion element',\n          position: { x: 50, y: 50 }\n        }\n      ];\n      \n      const promotion = await store.promoteToBoard(mockElements, 'mg-generale', {\n        customTitle: 'Promoted Test Board'\n      });\n      \n      // Validate store state\n      const stats = store.getSystemStats();\n      \n      console.log('✅ Store integration test passed:', {\n        boardCreated: !!board,\n        gardenCreated: !!garden,\n        navigationWorked: activeGarden === garden.id && currentView === 'board',\n        promotionWorked: !!promotion.board,\n        totalGardens: stats.totalGardens\n      });\n      \n      return {\n        success: true,\n        board,\n        garden,\n        promotion,\n        stats\n      };\n      \n    } catch (error) {\n      console.error('❌ Store integration test failed:', error);\n      return { success: false, error };\n    }\n  },\n  \n  /**\n   * Run all tests\n   */\n  runAllTests: async () => {\n    console.log('🧪 Running all BiFlow tests...');\n    \n    const results = {\n      basicCreation: biflowTests.testBasicCreation(),\n      promotionFlow: biflowTests.testPromotionFlow(),\n      legacyMigration: biflowTests.testLegacyMigration(),\n      hierarchyValidation: biflowTests.testHierarchyValidation(),\n      orphanDetection: biflowTests.testOrphanDetection(),\n      storeIntegration: await biflowTests.testStoreIntegration()\n    };\n    \n    const passedTests = Object.values(results).filter(r => r.success).length;\n    const totalTests = Object.keys(results).length;\n    \n    console.log(`\\n🧪 BiFlow Test Results: ${passedTests}/${totalTests} passed`);\n    \n    if (passedTests === totalTests) {\n      console.log('✅ All BiFlow tests passed! System is ready for implementation.');\n    } else {\n      console.log('❌ Some BiFlow tests failed. Review errors before proceeding.');\n    }\n    \n    return {\n      success: passedTests === totalTests,\n      passedTests,\n      totalTests,\n      results\n    };\n  }\n};\n\n// 🌱 PERFORMANCE TESTS: BiFlow Operations\nexport const biflowPerformanceTests = {\n  \n  /**\n   * Test creation performance\n   */\n  testCreationPerformance: (iterations = 100) => {\n    console.log(`🚀 Testing creation performance (${iterations} iterations)...`);\n    \n    const start = performance.now();\n    \n    for (let i = 0; i < iterations; i++) {\n      const board = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: i * 10, y: i * 10 });\n      const garden = createMindGarden(board.id);\n      board.mindGardenId = garden.id;\n      \n      // Validate each creation\n      const validation = biflowUtils.validation.validateBoardGardenLink(board, garden);\n      if (!validation.isValid) {\n        throw new Error(`Validation failed at iteration ${i}`);\n      }\n    }\n    \n    const end = performance.now();\n    const duration = end - start;\n    const avgTime = duration / iterations;\n    \n    console.log(`✅ Creation performance: ${avgTime.toFixed(2)}ms per board-garden pair`);\n    \n    return {\n      totalTime: duration,\n      averageTime: avgTime,\n      iterations\n    };\n  },\n  \n  /**\n   * Test promotion performance\n   */\n  testPromotionPerformance: (elementCounts = [5, 10, 25, 50]) => {\n    console.log('🚀 Testing promotion performance...');\n    \n    const results = elementCounts.map(count => {\n      const elements = Array.from({ length: count }, (_, i) => ({\n        id: `element_${i}`,\n        type: 'note',\n        content: `Test element ${i}`,\n        position: { x: i * 20, y: i * 20 }\n      }));\n      \n      const start = performance.now();\n      \n      const { board, dedicatedGarden } = biflowUtils.promotion.promoteElementsToBoard(\n        elements,\n        'mg-generale'\n      );\n      \n      const end = performance.now();\n      const duration = end - start;\n      \n      console.log(`✅ Promotion ${count} elements: ${duration.toFixed(2)}ms`);\n      \n      return {\n        elementCount: count,\n        duration,\n        boardId: board.id,\n        gardenId: dedicatedGarden.id\n      };\n    });\n    \n    return results;\n  },\n  \n  /**\n   * Test validation performance\n   */\n  testValidationPerformance: (boardCounts = [10, 50, 100, 500]) => {\n    console.log('🚀 Testing validation performance...');\n    \n    const results = boardCounts.map(count => {\n      // Create test boards and gardens\n      const boards = [];\n      const gardens = [];\n      \n      for (let i = 0; i < count; i++) {\n        const board = createBiFlowBoard(ELEMENT_TYPES.BOARD, { x: i * 10, y: i * 10 });\n        const garden = createMindGarden(board.id);\n        board.mindGardenId = garden.id;\n        \n        boards.push(board);\n        gardens.push(garden);\n      }\n      \n      const start = performance.now();\n      \n      // Run validation suite\n      const orphanCheck = biflowUtils.validation.findOrphanedEntities(boards, gardens);\n      const hierarchyCheck = biflowUtils.validation.validateHierarchy(boards, gardens);\n      \n      // Validate all individual links\n      boards.forEach(board => {\n        const garden = gardens.find(g => g.id === board.mindGardenId);\n        biflowUtils.validation.validateBoardGardenLink(board, garden);\n      });\n      \n      const end = performance.now();\n      const duration = end - start;\n      \n      console.log(`✅ Validation ${count} boards: ${duration.toFixed(2)}ms`);\n      \n      return {\n        boardCount: count,\n        duration,\n        hasOrphans: orphanCheck.hasOrphans,\n        hierarchyValid: hierarchyCheck.isValid\n      };\n    });\n    \n    return results;\n  }\n};\n\n// 🌱 DEMO: Interactive BiFlow demonstration\nexport const biflowDemo = {\n  \n  /**\n   * Create demo scenario\n   */\n  createDemoScenario: () => {\n    console.log('🎬 Creating BiFlow demo scenario...');\n    \n    // Initialize store\n    const store = useBiFlowStore.getState();\n    store.resetSystem();\n    \n    // 1. Create main project board\n    const { board: mainBoard, garden: mainGarden } = store.createBoardWithGarden(\n      { x: 100, y: 100 },\n      {\n        title: 'NFT Collection Project',\n        description: 'Main project board for NFT collection development'\n      }\n    );\n    \n    // 2. Add ideas to main garden\n    store.updateGarden(mainGarden.id, {\n      elements: [\n        {\n          id: 'idea_art_style',\n          type: 'note',\n          content: 'Cyberpunk art style with neon aesthetics',\n          position: { x: 100, y: 50 }\n        },\n        {\n          id: 'idea_utility',\n          type: 'note',\n          content: 'Token holders get access to exclusive events',\n          position: { x: 250, y: 100 }\n        },\n        {\n          id: 'idea_mechanics',\n          type: 'note',\n          content: 'Dynamic metadata that evolves over time',\n          position: { x: 150, y: 200 }\n        }\n      ]\n    });\n    \n    // 3. Promote art style ideas to sub-board\n    const artElements = [\n      {\n        id: 'art_concept_1',\n        type: 'note',\n        content: 'Character design: Cyber warriors',\n        position: { x: 50, y: 50 }\n      },\n      {\n        id: 'art_concept_2',\n        type: 'note',\n        content: 'Background: Neon cityscapes',\n        position: { x: 200, y: 80 }\n      }\n    ];\n    \n    const artPromotion = store.promoteToBoard(\n      artElements,\n      mainGarden.id,\n      {\n        customTitle: 'Art & Design',\n        description: 'Visual design and artwork development'\n      }\n    );\n    \n    // 4. Create technical sub-board\n    const { board: techBoard, garden: techGarden } = store.createBoardWithGarden(\n      { x: 400, y: 150 },\n      {\n        title: 'Technical Implementation',\n        description: 'Smart contracts and blockchain integration',\n        parentBoardId: mainBoard.id\n      }\n    );\n    \n    console.log('✅ Demo scenario created:', {\n      mainBoard: mainBoard.id,\n      artBoard: artPromotion.board.id,\n      techBoard: techBoard.id,\n      totalGardens: store.getSystemStats().totalGardens\n    });\n    \n    return {\n      mainBoard,\n      mainGarden,\n      artPromotion,\n      techBoard,\n      techGarden,\n      stats: store.getSystemStats()\n    };\n  },\n  \n  /**\n   * Demonstrate navigation flows\n   */\n  demonstrateNavigation: () => {\n    console.log('🧭 Demonstrating BiFlow navigation...');\n    \n    const store = useBiFlowStore.getState();\n    const demo = biflowDemo.createDemoScenario();\n    \n    // Navigation sequence\n    console.log('1. Starting at main board');\n    console.log('   Current view:', store.currentView);\n    \n    console.log('2. Navigate to main garden');\n    store.navigateToGarden(demo.mainBoard.id);\n    console.log('   Current view:', store.currentView, 'Garden:', store.activeGardenId);\n    \n    console.log('3. Navigate back to board');\n    store.navigateToBoard(demo.mainGarden.id);\n    console.log('   Current view:', store.currentView);\n    \n    console.log('4. Navigate to art sub-board garden');\n    store.navigateToGarden(demo.artPromotion.board.id);\n    console.log('   Current view:', store.currentView, 'Garden:', store.activeGardenId);\n    \n    console.log('✅ Navigation demonstration completed');\n    \n    return {\n      success: true,\n      finalState: {\n        currentView: store.currentView,\n        activeGarden: store.activeGardenId\n      }\n    };\n  }\n};\n\n// 🌱 Export test runner for easy access\nexport const runBiFlowTests = biflowTests.runAllTests;\nexport const runPerformanceTests = () => {\n  console.log('🚀 Running BiFlow performance tests...');\n  \n  const creation = biflowPerformanceTests.testCreationPerformance();\n  const promotion = biflowPerformanceTests.testPromotionPerformance();\n  const validation = biflowPerformanceTests.testValidationPerformance();\n  \n  return { creation, promotion, validation };\n};\n\n// 🌱 Export demo for interactive testing\nexport const runBiFlowDemo = () => {\n  console.log('🎬 Running BiFlow demo...');\n  \n  const scenario = biflowDemo.createDemoScenario();\n  const navigation = biflowDemo.demonstrateNavigation();\n  \n  return { scenario, navigation };\n};