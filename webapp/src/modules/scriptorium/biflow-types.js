/**
 * 🌱 BIFLOW DATA MODEL - Mind Garden ↔ Scriptorium Types (v2.0.1)
 * 
 * 🚨 POLICY: All code, data models, UX/UI flows and architecture
 * MUST comply with the single specification at /docs/BIFLOW-COMPLETE-TYPES.md (current version: v2.0.1).
 * In case of any doubt or discrepancy between code, comments, chat, or other docs,
 * the latest version of this document ALWAYS TAKES PRECEDENCE.
 * No structural changes may be made without reviewing and updating the spec.
 * 
 * This module defines the complete BiFlow v2.0 type system:
 * - FMG (Freestyle Mind Garden) ↔ FS (Freestyle Scriptorium)
 * - PMG (Project Mind Garden) ↔ PS (Project Scriptorium) 
 * - BMG (Board Mind Garden) ⇄ Board (1:1 sacred relationship)
 */

import { ELEMENT_TYPES, createCanvasElement } from './types.js';

// 🌱 BIFLOW v2.0: Mind Garden Types
export const MIND_GARDEN_TYPES = {
  FMG: 'freestyle-mind-garden',    // Freestyle Mind Garden - brainstorming libero, multipli possibili
  PMG: 'project-mind-garden',      // Project Mind Garden - giardino delle idee di progetto specifico
  BMG: 'board-mind-garden'         // Board Mind Garden - sempre 1:1 con board, micro-brainstorming
};

// 📋 BIFLOW v2.0: Scriptorium Types  
export const SCRIPTORIUM_TYPES = {
  FS: 'freestyle-scriptorium',     // Freestyle Scriptorium - workspace creativo indipendente
  PS: 'project-scriptorium'        // Project Scriptorium - spazio operativo di progetto
};

// 🔄 BIFLOW v2.0: Flow Types
export const BIFLOW_TYPES = {
  FMG_TO_FS: 'fmg-to-fs',         // Freestyle Mind Garden → Freestyle Scriptorium
  FS_TO_FMG: 'fs-to-fmg',         // Freestyle Scriptorium → Freestyle Mind Garden
  PMG_TO_PS: 'pmg-to-ps',         // Project Mind Garden → Project Scriptorium
  PS_TO_PMG: 'ps-to-pmg',         // Project Scriptorium → Project Mind Garden
  BMG_TO_BOARD: 'bmg-to-board',   // Board Mind Garden → Board (bidirectional)
  BOARD_TO_BMG: 'board-to-bmg',   // Board → Board Mind Garden (bidirectional)
  FMG_TO_PS: 'fmg-to-ps-direct',  // Special: Freestyle ideas → formal project
  PMG_TO_FS: 'pmg-to-fs-reverse'  // Special: Project ideas → experimental workspace
};

// 🎯 BIFLOW v2.0: Creative Modes (Freestyle vs Project semantic difference)
export const CREATIVE_MODES = {
  FREESTYLE: 'freestyle',         // Free exploration, no commitment, low anxiety
  PROJECT: 'project'              // Formal project with metadata, higher commitment
};

// 🌱 BIFLOW: Origin tracking constants
export const BIFLOW_ORIGINS = {
  // Mind Garden origins
  GENERAL: 'general',                    // SPECIAL: The root general Mind Garden (no board)
  FREESTYLE_CREATION: 'fmg-creation',    // Created as Freestyle Mind Garden
  PROJECT_CREATION: 'pmg-creation',      // Created as Project Mind Garden  
  BOARD_DEDICATED: 'bmg-dedicated',      // Created as dedicated garden for board
  PROMOTED: 'promoted',                  // Created when scriptorium was promoted from ideas
  MIGRATED: 'migrated',                  // Migrated from legacy system
  
  // Scriptorium origins
  MANUAL: 'manual',                      // Created manually by user
  AI_GENERATED: 'ai',                    // Generated by AI assistant
  PROMOTED_FROM_MG: 'promoted-from-mg',  // Promoted from Mind Garden
  DUPLICATED: 'duplicated',              // Duplicated from existing scriptorium
  IMPORTED: 'imported',                  // Imported from external source
  SUB_SCRIPTORIUM: 'sub-scriptorium'     // Created as sub-workspace
};

// 🌱 BIFLOW: Special constants for General Mind Garden
export const GENERAL_MIND_GARDEN = {
  ID: 'general-mind-garden',
  TITLE: 'Mind Garden Generale',
  DESCRIPTION: 'The root creative space where all ideas begin',
  TYPE: MIND_GARDEN_TYPES.FMG  // General is always Freestyle
};

// 🌱 BIFLOW v2.0: Create Freestyle Mind Garden (FMG)
export const createFreestyleMindGarden = (options = {}) => {
  return {
    // Core identity
    id: options.id || `fmg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: MIND_GARDEN_TYPES.FMG,
    
    // 🎯 Creative mode (always freestyle for FMG)
    mode: CREATIVE_MODES.FREESTYLE,
    
    // 🔗 Scriptorium relationship (multiple FS possible)
    linkedScriptoriumIds: options.linkedScriptoriumIds || [],
    
    // 🌱 Origin tracking
    origin: options.origin || BIFLOW_ORIGINS.FREESTYLE_CREATION,
    
    // 🌱 Content and layout
    elements: options.elements || [],
    layout: {
      nodes: options.nodes || [],
      edges: options.edges || [],
      viewport: options.viewport || { x: 0, y: 0, zoom: 1 },
      layoutType: options.layoutType || 'organic',
      autoLayout: options.autoLayout !== false,
      theme: options.theme || 'freestyle', // Soft colors, encouraging
      colorScheme: options.colorScheme || 'warm'
    },
    
    // 🌱 Timestamps
    createdAt: Date.now(),
    updatedAt: Date.now(),
    lastAccessedAt: Date.now(),
    
    // 🌱 Metadata
    metadata: {
      title: options.title || 'Freestyle Exploration',
      description: options.description || 'Free-form brainstorming space',
      tags: options.tags || ['freestyle', 'brainstorming'],
      
      // Freestyle characteristics
      isMultipleAllowed: true,
      anxietyLevel: 'low',
      commitmentLevel: 'none',
      
      // AI enhancement settings
      aiEnhancementEnabled: options.aiEnhancementEnabled !== false,
      aiSuggestionsEnabled: options.aiSuggestionsEnabled !== false,
      
      // Usage statistics
      sessionCount: 0,
      totalTimeSpent: 0,
      ideaCount: 0,
      promotionCount: 0
    }
  };
};

// 🌱 BIFLOW v2.0: Create Project Mind Garden (PMG)
export const createProjectMindGarden = (projectId, options = {}) => {
  return {
    // Core identity
    id: options.id || `pmg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: MIND_GARDEN_TYPES.PMG,
    
    // 🎯 Creative mode (can be freestyle or project)
    mode: options.mode || CREATIVE_MODES.PROJECT,
    
    // 🔗 Project relationship (1:1 with PS)
    projectId: projectId,
    linkedScriptoriumId: options.linkedScriptoriumId || null,
    
    // 🌱 Origin tracking
    origin: options.origin || BIFLOW_ORIGINS.PROJECT_CREATION,
    
    // 🌱 Content and layout
    elements: options.elements || [],
    layout: {
      nodes: options.nodes || [],
      edges: options.edges || [],
      viewport: options.viewport || { x: 0, y: 0, zoom: 1 },
      layoutType: options.layoutType || 'structured',
      autoLayout: options.autoLayout !== false,
      theme: options.theme || 'project', // Professional colors
      colorScheme: options.colorScheme || 'structured'
    },
    
    // 🌱 Timestamps
    createdAt: Date.now(),
    updatedAt: Date.now(),
    lastAccessedAt: Date.now(),
    
    // 🎯 Project metadata (formal project context)
    project: {
      name: options.projectName || null,
      description: options.projectDescription || null,
      tags: options.projectTags || [],
      deadline: options.projectDeadline || null,
      collaborators: options.projectCollaborators || [],
      status: options.projectStatus || 'active',
      priority: options.projectPriority || 'medium'
    },
    
    // 🌱 Metadata
    metadata: {
      title: options.title || `Ideas: ${options.projectName || 'Untitled Project'}`,
      description: options.description || 'Giardino delle idee di progetto specifico',
      tags: [...(options.tags || []), 'project', 'structured'],
      
      // Project characteristics
      isMultipleAllowed: false, // 1:1 with project
      anxietyLevel: 'medium',
      commitmentLevel: 'high',
      
      // AI enhancement settings
      aiEnhancementEnabled: options.aiEnhancementEnabled !== false,
      aiSuggestionsEnabled: options.aiSuggestionsEnabled !== false,
      
      // Usage statistics
      sessionCount: 0,
      totalTimeSpent: 0,
      ideaCount: 0,
      promotionCount: 0
    }
  };
};

// 🌱 BIFLOW v2.0: Create Board Mind Garden (BMG) - SACRED 1:1 with Board
export const createBoardMindGarden = (boardId, options = {}) => {
  return {
    // Core identity
    id: options.id || `bmg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: MIND_GARDEN_TYPES.BMG,
    
    // 🎯 Creative mode (inherits from parent context)
    mode: options.mode || CREATIVE_MODES.FREESTYLE,
    
    // 🔗 SACRED 1:1 Board relationship (NEVER null)
    boardId: boardId, // MANDATORY - BMG always has exactly one board
    
    // 🌱 Origin tracking
    origin: options.origin || BIFLOW_ORIGINS.BOARD_DEDICATED,
    
    // 🌱 Content and layout (micro-brainstorming focused)
    elements: options.elements || [],
    layout: {
      nodes: options.nodes || [],
      edges: options.edges || [],
      viewport: options.viewport || { x: 0, y: 0, zoom: 1 },
      layoutType: options.layoutType || 'compact',
      autoLayout: options.autoLayout !== false,
      theme: options.theme || 'micro', // Compact, focused
      colorScheme: options.colorScheme || 'contextual'
    },
    
    // 🌱 Timestamps
    createdAt: Date.now(),
    updatedAt: Date.now(),
    lastAccessedAt: Date.now(),
    
    // 🌱 Metadata
    metadata: {
      title: options.title || `Ideas: ${options.boardTitle || 'Board'}`,
      description: options.description || 'Micro-brainstorming per board specifica',
      tags: [...(options.tags || []), 'board-specific', 'micro-brainstorming'],
      
      // BMG characteristics
      isMultipleAllowed: false, // SACRED 1:1 with board
      anxietyLevel: 'low',
      commitmentLevel: 'contextual',
      
      // Board context
      boardTitle: options.boardTitle || null,
      boardType: options.boardType || null,
      
      // AI enhancement settings
      aiEnhancementEnabled: options.aiEnhancementEnabled !== false,
      aiSuggestionsEnabled: options.aiSuggestionsEnabled !== false,
      
      // Usage statistics
      sessionCount: 0,
      totalTimeSpent: 0,
      ideaCount: 0,
      boardSyncCount: 0
    }
  };
};

// 📋 BIFLOW v2.0: Create Freestyle Scriptorium (FS)
export const createFreestyleScriptorium = (options = {}) => {
  return {
    // Core identity  
    id: options.id || `fs_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: SCRIPTORIUM_TYPES.FS,
    
    // 🎯 Creative mode (always freestyle for FS)
    mode: CREATIVE_MODES.FREESTYLE,
    
    // 🔗 Mind Garden relationship (multiple FMG possible)
    linkedMindGardenIds: options.linkedMindGardenIds || [],
    
    // 🌱 Origin tracking
    origin: options.origin || BIFLOW_ORIGINS.MANUAL,
    
    // 🏠 Scriptorium Home (local landing area)
    home: {
      elements: options.homeElements || [], // Elements promoted from Mind Gardens arrive here
      layout: options.homeLayout || { gridSize: 200, autoArrange: true },
      title: options.homeTitle || 'Creative Home',
      description: options.homeDescription || 'Staging area for promoted ideas'
    },
    
    // 📋 Boards collection (multiple boards within scriptorium)
    boards: options.boards || [],
    
    // 🔗 Additional elements (notes, links, etc.)
    notes: options.notes || [],
    links: options.links || [],
    
    // 🌱 Timestamps
    createdAt: Date.now(),
    updatedAt: Date.now(),
    lastAccessedAt: Date.now(),
    
    // 🌱 Metadata
    metadata: {
      title: options.title || 'Freestyle Workspace',
      description: options.description || 'Workspace creativo indipendente',
      tags: [...(options.tags || []), 'freestyle', 'workspace'],
      
      // Freestyle characteristics
      isMultipleAllowed: true,
      anxietyLevel: 'low',
      commitmentLevel: 'none',
      
      // Structure info
      boardCount: 0,
      noteCount: 0,
      linkCount: 0,
      promotionCount: 0,
      
      // Usage statistics
      sessionCount: 0,
      totalTimeSpent: 0,
      lastPromotionAt: null
    }
  };
};

// 📋 BIFLOW v2.0: Create Project Scriptorium (PS)
export const createProjectScriptorium = (projectId, options = {}) => {
  return {
    // Core identity
    id: options.id || `ps_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: SCRIPTORIUM_TYPES.PS,
    
    // 🎯 Creative mode (can be freestyle or project)
    mode: options.mode || CREATIVE_MODES.PROJECT,
    
    // 🔗 Project relationship (1:1 with PMG)
    projectId: projectId,
    linkedMindGardenId: options.linkedMindGardenId || null,
    
    // 🌱 Origin tracking
    origin: options.origin || BIFLOW_ORIGINS.MANUAL,
    
    // 🏠 Scriptorium Home (local landing area)
    home: {
      elements: options.homeElements || [], // Elements promoted from PMG arrive here
      layout: options.homeLayout || { gridSize: 200, autoArrange: true },
      title: options.homeTitle || 'Project Home',
      description: options.homeDescription || 'Staging area for project ideas'
    },
    
    // 📋 Boards collection (structured for project deliverables)
    boards: options.boards || [],
    
    // 🔗 Additional elements
    notes: options.notes || [],
    links: options.links || [],
    
    // 🌱 Timestamps
    createdAt: Date.now(),
    updatedAt: Date.now(),
    lastAccessedAt: Date.now(),
    
    // 🎯 Project metadata (formal project context)
    project: {
      name: options.projectName || null,
      description: options.projectDescription || null,
      tags: options.projectTags || [],
      deadline: options.projectDeadline || null,
      collaborators: options.projectCollaborators || [],
      status: options.projectStatus || 'active',
      priority: options.projectPriority || 'medium'
    },
    
    // 🌱 Metadata
    metadata: {
      title: options.title || `Workspace: ${options.projectName || 'Untitled Project'}`,
      description: options.description || 'Spazio operativo di progetto',
      tags: [...(options.tags || []), 'project', 'workspace'],
      
      // Project characteristics
      isMultipleAllowed: false, // 1:1 with project
      anxietyLevel: 'medium',
      commitmentLevel: 'high',
      
      // Structure info
      boardCount: 0,
      noteCount: 0,
      linkCount: 0,
      promotionCount: 0,
      
      // Usage statistics
      sessionCount: 0,
      totalTimeSpent: 0,
      lastPromotionAt: null
    }
  };
};

// 🌱 BIFLOW: Create the special General Mind Garden
export const createGeneralMindGarden = () => {
  return {
    // Special fixed ID for General Mind Garden
    id: GENERAL_MIND_GARDEN.ID,
    type: MIND_GARDEN_TYPES.FMG, // General is always Freestyle
    
    // 🚨 SPECIAL EXCEPTION: General Mind Garden has NO scriptorium initially
    linkedScriptoriumIds: [],
    
    // Special origin for General Garden
    origin: BIFLOW_ORIGINS.GENERAL,
    
    // 🎯 Always freestyle (never promoted to project)
    mode: CREATIVE_MODES.FREESTYLE,
    
    // Initial empty elements
    elements: [],
    
    // Layout configuration
    layout: {
      nodes: [],
      edges: [],
      viewport: { x: 0, y: 0, zoom: 1 },
      layoutType: 'organic',
      autoLayout: true,
      theme: 'general', // Special theme for general garden
      colorScheme: 'welcoming'
    },
    
    // Timestamps
    createdAt: Date.now(),
    updatedAt: Date.now(),
    lastAccessedAt: Date.now(),
    
    // Special metadata for General Garden
    metadata: {
      title: GENERAL_MIND_GARDEN.TITLE,
      description: GENERAL_MIND_GARDEN.DESCRIPTION,
      tags: ['general', 'starter', 'brainstorming'],
      
      // Special flags
      isGeneralGarden: true,
      isDeletable: false,
      isAlwaysVisible: true,
      
      // Freestyle characteristics
      isMultipleAllowed: true, // User can have multiple FMG
      anxietyLevel: 'minimal',
      commitmentLevel: 'none',
      
      // AI enhancement enabled by default
      aiEnhancementEnabled: true,
      aiSuggestionsEnabled: true,
      
      // Usage statistics
      sessionCount: 0,
      totalTimeSpent: 0,
      ideaCount: 0,
      promotionCount: 0,
      
      // Promotion statistics
      totalPromotions: 0,
      scriptoriumsCreated: []
    }
  };
};

// 🔄 BIFLOW v2.0: Flow Utilities
export const biflowFlows = {
  /**
   * Validate flow compatibility between Mind Garden and Scriptorium types
   */
  validateFlowCompatibility: (sourceType, targetType) => {
    const compatibleFlows = {
      [MIND_GARDEN_TYPES.FMG]: [SCRIPTORIUM_TYPES.FS, SCRIPTORIUM_TYPES.PS], // FMG can go to FS or PS (direct)
      [MIND_GARDEN_TYPES.PMG]: [SCRIPTORIUM_TYPES.PS, SCRIPTORIUM_TYPES.FS], // PMG can go to PS or FS (reverse)
      [MIND_GARDEN_TYPES.BMG]: ['board'], // BMG only flows to its specific board
      [SCRIPTORIUM_TYPES.FS]: [MIND_GARDEN_TYPES.FMG, MIND_GARDEN_TYPES.PMG], // FS can connect to FMG or PMG
      [SCRIPTORIUM_TYPES.PS]: [MIND_GARDEN_TYPES.PMG, MIND_GARDEN_TYPES.FMG]  // PS can connect to PMG or FMG
    };
    
    const allowedTargets = compatibleFlows[sourceType] || [];
    return allowedTargets.includes(targetType);
  },
  
  /**
   * Get flow type for specific source-target combination
   */
  getFlowType: (sourceType, targetType) => {
    const flowMap = {
      [`${MIND_GARDEN_TYPES.FMG}-${SCRIPTORIUM_TYPES.FS}`]: BIFLOW_TYPES.FMG_TO_FS,
      [`${SCRIPTORIUM_TYPES.FS}-${MIND_GARDEN_TYPES.FMG}`]: BIFLOW_TYPES.FS_TO_FMG,
      [`${MIND_GARDEN_TYPES.PMG}-${SCRIPTORIUM_TYPES.PS}`]: BIFLOW_TYPES.PMG_TO_PS,
      [`${SCRIPTORIUM_TYPES.PS}-${MIND_GARDEN_TYPES.PMG}`]: BIFLOW_TYPES.PS_TO_PMG,
      [`${MIND_GARDEN_TYPES.BMG}-board`]: BIFLOW_TYPES.BMG_TO_BOARD,
      [`board-${MIND_GARDEN_TYPES.BMG}`]: BIFLOW_TYPES.BOARD_TO_BMG,
      [`${MIND_GARDEN_TYPES.FMG}-${SCRIPTORIUM_TYPES.PS}`]: BIFLOW_TYPES.FMG_TO_PS,
      [`${MIND_GARDEN_TYPES.PMG}-${SCRIPTORIUM_TYPES.FS}`]: BIFLOW_TYPES.PMG_TO_FS
    };
    
    return flowMap[`${sourceType}-${targetType}`] || null;
  }
};

// 🌱 BIFLOW v2.0: Validation utilities
export const biflowValidation = {
  /**
   * Validate BMG ⇄ Board sacred 1:1 relationship
   */
  validateBoardGardenLink: (board, garden) => {
    const errors = [];
    
    // Special case: General Mind Garden validation
    if (garden.id === GENERAL_MIND_GARDEN.ID || garden.metadata?.isGeneralGarden) {
      if (garden.linkedScriptoriumIds && garden.linkedScriptoriumIds.length > 0) {
        // General can link to scriptoriums but not boards
        return { isValid: true, errors: [], isGeneralGarden: true };
      }
      return { isValid: true, errors: [], isGeneralGarden: true };
    }
    
    // BMG must have exactly one board
    if (garden.type === MIND_GARDEN_TYPES.BMG) {
      if (!garden.boardId) {
        errors.push('BIFLOW_VIOLATION: BMG missing boardId');
      }
      if (garden.boardId !== board.id) {
        errors.push('BIFLOW_VIOLATION: BMG boardId does not match board id');
      }
    }
    
    // Board must have exactly one BMG (if it has a mind garden)
    if (board.mindGardenId && board.mindGardenId !== garden.id) {
      errors.push('BIFLOW_VIOLATION: Board mindGardenId does not match garden id');
    }
    
    return {
      isValid: errors.length === 0,
      errors,
      isGeneralGarden: false
    };
  },
  
  /**
   * Find orphaned entities
   */
  findOrphanedEntities: (boards, gardens, scriptoriums) => {
    const orphanedBoards = boards.filter(board => {
      if (!board.mindGardenId) return true;
      return !gardens.find(garden => garden.id === board.mindGardenId);
    });
    
    const orphanedGardens = gardens.filter(garden => {
      // Special exception: General Mind Garden is allowed to be "orphaned"
      if (garden.id === GENERAL_MIND_GARDEN.ID || garden.metadata?.isGeneralGarden) {
        return false;
      }
      
      // BMG must have a valid board
      if (garden.type === MIND_GARDEN_TYPES.BMG) {
        return !garden.boardId || !boards.find(board => board.id === garden.boardId);
      }
      
      // FMG/PMG can exist without immediate scriptorium link
      return false;
    });
    
    const orphanedScriptoriums = scriptoriums.filter(scriptorium => {
      // FS can exist independently
      if (scriptorium.type === SCRIPTORIUM_TYPES.FS) {
        return false; // FS can be independent
      }
      
      // PS should have project context
      if (scriptorium.type === SCRIPTORIUM_TYPES.PS) {
        return !scriptorium.projectId;
      }
      
      return false;
    });
    
    return {
      orphanedBoards,
      orphanedGardens,
      orphanedScriptoriums,
      hasOrphans: orphanedBoards.length > 0 || orphanedGardens.length > 0 || orphanedScriptoriums.length > 0
    };
  }
};

// 🎯 BIFLOW v2.0: Freestyle ↔ Project promotion utilities
export const freestyleProjectUtils = {
  /**
   * Promote creative space from freestyle to project
   */
  promoteToProject: (space, projectMetadata = {}) => {
    if (space.mode === CREATIVE_MODES.PROJECT) {
      console.warn('Space is already a project:', space.id);
      return space;
    }
    
    // Special case: General Mind Garden cannot be promoted
    if (space.id === GENERAL_MIND_GARDEN.ID || space.metadata?.isGeneralGarden) {
      throw new Error('General Mind Garden cannot be promoted to project');
    }
    
    const promotedSpace = {
      ...space,
      mode: CREATIVE_MODES.PROJECT,
      project: {
        name: projectMetadata.name || null,
        description: projectMetadata.description || null,
        tags: projectMetadata.tags || [],
        deadline: projectMetadata.deadline || null,
        collaborators: projectMetadata.collaborators || [],
        status: projectMetadata.status || 'active',
        priority: projectMetadata.priority || 'medium'
      },
      updatedAt: Date.now(),
      metadata: {
        ...space.metadata,
        anxietyLevel: 'medium',
        commitmentLevel: 'high',
        theme: 'project',
        colorScheme: 'structured'
      }
    };
    
    console.log('✅ Space promoted to project:', space.id, '→', projectMetadata.name);
    return promotedSpace;
  },
  
  /**
   * Demote creative space from project back to freestyle
   */
  demoteToFreestyle: (space, preserveProjectData = false) => {
    if (space.mode === CREATIVE_MODES.FREESTYLE) {
      console.warn('Space is already freestyle:', space.id);
      return space;
    }
    
    const demotedSpace = {
      ...space,
      mode: CREATIVE_MODES.FREESTYLE,
      project: preserveProjectData ? space.project : null,
      updatedAt: Date.now(),
      metadata: {
        ...space.metadata,
        anxietyLevel: 'low',
        commitmentLevel: 'none',
        theme: space.type.includes('mind-garden') ? 'freestyle' : 'freestyle',
        colorScheme: 'warm'
      }
    };
    
    console.log('✅ Space demoted to freestyle:', space.id);
    return demotedSpace;
  }
};

// Export all BiFlow v2.0 utilities
export const biflowUtils = {
  flows: biflowFlows,
  validation: biflowValidation,
  freestyleProject: freestyleProjectUtils
};